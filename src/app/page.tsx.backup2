"use client";

import { useState, useEffect, useRef, useCallback } from "react";
import { useSession } from "next-auth/react";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeHighlight from "rehype-highlight";

type UiMessage = {
  id: string;
  role: "user" | "assistant";
  content: string;
  createdAt?: string;
};

type PendingAttachment = {
  images: string[];
  files: Array<{ name: string; content: string }>;
};

export default function CleanPage() {
  const { data: session, status } = useSession();
  const [messages, setMessages] = useState<UiMessage[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [siteLang, setSiteLang] = useState("zh");
  const [isClient, setIsClient] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [pending, setPending] = useState<PendingAttachment>({ images: [], files: [] });
  const [showHero, setShowHero] = useState(true);
  const [conversations, setConversations] = useState<Array<{id: string; title: string}>>([]);
  const [conversationId, setConversationId] = useState<string | null>(null);
  const [dragOver, setDragOver] = useState(false);
  const [toast, setToast] = useState("");
  const [thinkMode, setThinkMode] = useState(false);
  const [webEnabled, setWebEnabled] = useState(false);
  const [isThinking, setIsThinking] = useState(false);
  const [thinkingSteps, setThinkingSteps] = useState<string[]>([]);
  const [imageEditPrompt, setImageEditPrompt] = useState("");
  const [imageGenPrompt, setImageGenPrompt] = useState("");
  const [showImageGenInput, setShowImageGenInput] = useState(false);
  const [recording, setRecording] = useState(false);
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [currentSuggestionSet, setCurrentSuggestionSet] = useState(0);
  const [greeting, setGreeting] = useState("今天有什么可以帮到你?");
  const [showSettings, setShowSettings] = useState(false);
  const [autoScroll, setAutoScroll] = useState(true);
  const [messageCount, setMessageCount] = useState(0);
  const [lastActivity, setLastActivity] = useState<Date | null>(null);
  const [theme, setTheme] = useState<'light' | 'dark' | 'system'>('system');
  const [actualTheme, setActualTheme] = useState<'light' | 'dark'>('light');
  const [settingsTab, setSettingsTab] = useState<'general' | 'account' | 'data' | 'agreement'>('general');
  const [isTyping, setIsTyping] = useState(false);
  const [typingTimeout, setTypingTimeout] = useState<NodeJS.Timeout | null>(null);
  const [selectedMessages, setSelectedMessages] = useState<Set<string>>(new Set());
  const [showMessageActions, setShowMessageActions] = useState<string | null>(null);
  const [showProfileEdit, setShowProfileEdit] = useState(false);
  const [showPasswordChange, setShowPasswordChange] = useState(false);
  const [profileData, setProfileData] = useState({
    name: '',
    email: '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });
  const [conversationTitle, setConversationTitle] = useState('');

  // 国际化文本映射
  const t = {
    zh: {
      startConversation: "开始对话...",
      deepThinking: "深度思考",
      webSearch: "联网搜索",
      newConversation: "开启新对话",
      historyDialog: "历史对话",
      systemSettings: "系统设置",
      generalSettings: "通用设置",
      accountManagement: "账号管理",
      serviceAgreement: "服务协议",
      pleaseLogin: "请登录以保存和查看历史对话",
      noHistory: "暂无历史对话",
      startNew: "开始新的对话吧",
      thinking: "深度思考中...",
      aiAnalyzing: "AI正在分析问题并生成最佳答案",
      aiThinking: "AI正在思考中...",
      aiAssistant: "AI助手",
      enableDeepThinking: "已开启深度思考模式",
      disableDeepThinking: "已关闭深度思考模式",
      enableWebSearch: "已开启联网搜索",
      disableWebSearch: "已关闭联网搜索",
      autoScroll: "自动滚动到最新消息",
      defaultDeepThinking: "默认开启深度思考模式",
      defaultWebSearch: "默认开启联网搜索",
      clearInput: "清空输入",
      exportData: "导出我的数据",
      deleteAccount: "删除账号",
      editProfile: "编辑个人资料",
      changePassword: "修改密码",
      privacySettings: "隐私设置",
      user: "用户",
      emailNotSet: "未设置邮箱",
      registrationTime: "注册时间",
      unknown: "未知",
      accountSettings: "账号设置",
      userInfo: "用户信息",
      cancel: "取消",
      save: "保存",
      enterName: "请输入姓名",
      enterEmail: "请输入邮箱",
      currentPassword: "当前密码",
      newPassword: "新密码",
      confirmPassword: "确认新密码",
      enterCurrentPassword: "请输入当前密码",
      enterNewPassword: "请输入新密码",
      enterConfirmPassword: "请再次输入新密码",
      passwordMismatch: "两次输入的密码不一致",
      passwordChanged: "密码修改成功",
      profileSaved: "个人资料已保存",
      serviceTerms: "服务条款",
      privacyPolicy: "隐私政策",
      contactUs: "联系我们",
      customerSupport: "客服支持",
      technicalFeedback: "技术反馈",
      businessCooperation: "商务合作",
      workingHours: "工作时间",
      onlineSupport: "在线客服",
      bugReport: "Bug报告",
      featureSuggestion: "功能建议",
      securityVulnerability: "安全漏洞",
      cooperation: "合作洽谈",
      enterpriseService: "企业服务",
      mediaContact: "媒体联系",
      lastUpdated: "更新时间",
      // 建议问题
      helpWriteResume: "帮我写一份简历",
      explainQuantumComputing: "解释一下量子计算",
      recommendBooks: "推荐几本好书",
      howToLearnProgramming: "如何学习编程",
      translateText: "翻译这段文字",
      summarizeArticle: "总结这篇文章",
      writePoem: "写一首诗",
      createStudyPlan: "制定学习计划",
      explainConcept: "解释这个概念",
      analyzeData: "分析这个数据",
      recommendTools: "推荐实用工具",
      solveProblem: "解决这个问题",
      // 触感反馈
      regenerating: "重新生成中...",
      copiedToClipboard: "已复制到剪贴板",
      linkCopiedToClipboard: "链接已复制到剪贴板",
      share: "分享",
      // 其他
      goodEvening: "晚上好! 今天过得怎么样?",
      aiIntroduction: "我是你的AI助手, 可以帮你回答问题、分析图片、生成内容等。有什么我可以帮助你的吗?",
      deepThinkingMode: "深度思考模式",
      webSearchMode: "联网搜索模式"
    },
    en: {
      startConversation: "Start conversation...",
      deepThinking: "Deep Thinking",
      webSearch: "Web Search",
      newConversation: "Start New Conversation",
      historyDialog: "History",
      systemSettings: "System Settings",
      generalSettings: "General Settings",
      accountManagement: "Account Management",
      serviceAgreement: "Service Agreement",
      pleaseLogin: "Please login to save and view chat history",
      noHistory: "No chat history",
      startNew: "Start a new conversation",
      thinking: "Deep thinking...",
      aiAnalyzing: "AI is analyzing the question and generating the best answer",
      aiThinking: "AI is thinking...",
      aiAssistant: "AI Assistant",
      enableDeepThinking: "Deep thinking mode enabled",
      disableDeepThinking: "Deep thinking mode disabled",
      enableWebSearch: "Web search enabled",
      disableWebSearch: "Web search disabled",
      autoScroll: "Auto scroll to latest message",
      defaultDeepThinking: "Default enable deep thinking mode",
      defaultWebSearch: "Default enable web search",
      clearInput: "Clear input",
      exportData: "Export my data",
      deleteAccount: "Delete account",
      editProfile: "Edit profile",
      changePassword: "Change password",
      privacySettings: "Privacy settings",
      user: "User",
      emailNotSet: "Email not set",
      registrationTime: "Registration time",
      unknown: "Unknown",
      accountSettings: "Account settings",
      userInfo: "User information",
      cancel: "Cancel",
      save: "Save",
      enterName: "Enter name",
      enterEmail: "Enter email",
      currentPassword: "Current password",
      newPassword: "New password",
      confirmPassword: "Confirm new password",
      enterCurrentPassword: "Enter current password",
      enterNewPassword: "Enter new password",
      enterConfirmPassword: "Enter new password again",
      passwordMismatch: "Passwords do not match",
      passwordChanged: "Password changed successfully",
      profileSaved: "Profile saved",
      serviceTerms: "Service Terms",
      privacyPolicy: "Privacy Policy",
      contactUs: "Contact Us",
      customerSupport: "Customer Support",
      technicalFeedback: "Technical Feedback",
      businessCooperation: "Business Cooperation",
      workingHours: "Working hours",
      onlineSupport: "Online support",
      bugReport: "Bug report",
      featureSuggestion: "Feature suggestion",
      securityVulnerability: "Security vulnerability",
      cooperation: "Cooperation",
      enterpriseService: "Enterprise service",
      mediaContact: "Media contact",
      lastUpdated: "Last updated",
      // 建议问题
      helpWriteResume: "Help me write a resume",
      explainQuantumComputing: "Explain quantum computing",
      recommendBooks: "Recommend some good books",
      howToLearnProgramming: "How to learn programming",
      translateText: "Translate this text",
      summarizeArticle: "Summarize this article",
      writePoem: "Write a poem",
      createStudyPlan: "Create a study plan",
      explainConcept: "Explain this concept",
      analyzeData: "Analyze this data",
      recommendTools: "Recommend useful tools",
      solveProblem: "Solve this problem",
      // 触感反馈
      regenerating: "Regenerating...",
      copiedToClipboard: "Copied to clipboard",
      linkCopiedToClipboard: "Link copied to clipboard",
      share: "Share",
      // 其他
      goodEvening: "Good evening! How was your day?",
      aiIntroduction: "I'm your AI assistant, here to help you answer questions, analyze images, generate content, and more. How can I assist you today?",
      deepThinkingMode: "Deep thinking mode",
      webSearchMode: "Web search mode"
    }
  };

  const currentT = t[siteLang as keyof typeof t] || t.zh;

  // 生成对话标题的函数
  const generateConversationTitle = (messages: UiMessage[]) => {
    if (messages.length === 0) return '';
    
    const firstUserMessage = messages.find(m => m.role === 'user');
    if (!firstUserMessage) return '';
    
    const content = firstUserMessage.content;
    // 简单的标题生成逻辑
    if (content.length <= 20) {
      return content;
    }
    
    // 提取关键词或前几个词
    const words = content.split(' ').slice(0, 4);
    return words.join(' ') + (content.length > 50 ? '...' : '');
  };
  
  const listRef = useRef<HTMLDivElement>(null);
  const heroInputRef = useRef<HTMLInputElement>(null);
  const heroFileRef = useRef<HTMLInputElement>(null);
  const abortRef = useRef<AbortController | null>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  // 建议问题
  const suggestionSets = [
    [currentT.helpWriteResume, currentT.explainQuantumComputing, currentT.recommendBooks, currentT.howToLearnProgramming],
    [currentT.translateText, currentT.summarizeArticle, currentT.writePoem, currentT.createStudyPlan],
    [currentT.explainConcept, currentT.analyzeData, currentT.recommendTools, currentT.solveProblem]
  ];

  // 主题切换逻辑
  useEffect(() => {
    if (typeof window !== "undefined") {
      const updateTheme = () => {
        let newTheme: 'light' | 'dark' = 'light';
        
        if (theme === 'system') {
          newTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        } else {
          newTheme = theme;
        }
        
        setActualTheme(newTheme);
        
        // 应用主题到document
        if (newTheme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      };
      
      updateTheme();
      
      // 监听系统主题变化
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      mediaQuery.addEventListener('change', updateTheme);
      
      return () => mediaQuery.removeEventListener('change', updateTheme);
    }
  }, [theme]);

  // 客户端检查
  useEffect(() => {
    if (typeof window !== "undefined") {
      setIsClient(true);
      const onResize = () => {
        const width = window.innerWidth;
        setIsMobile(width < 768);
        // 更新CSS变量用于响应式设计
        document.documentElement.style.setProperty('--viewport-width', `${width}px`);
        document.documentElement.style.setProperty('--is-mobile', width < 768 ? '1' : '0');
      };
      onResize();
      window.addEventListener("resize", onResize);
      
      // 监听设置菜单事件
      const handleShowSettings = () => {
        setShowSettings(true);
        if (typeof window !== "undefined" && 'vibrate' in navigator) {
          navigator.vibrate(30);
        }
      };
      
      // 监听侧边栏切换事件
      const handleSidebarToggle = () => {
        setSidebarOpen(prev => !prev);
        if (typeof window !== "undefined" && 'vibrate' in navigator) {
          navigator.vibrate(30);
        }
      };
      
      // 监听新建对话事件
      const handleNewConversation = () => {
        newConversation();
      };
      
      window.addEventListener("app:show-settings", handleShowSettings);
      window.addEventListener("app:sidebar-toggle", handleSidebarToggle);
      window.addEventListener("app:new-conversation", handleNewConversation);
      
      return () => {
        window.removeEventListener("resize", onResize);
        window.removeEventListener("app:show-settings", handleShowSettings);
        window.removeEventListener("app:sidebar-toggle", handleSidebarToggle);
        window.removeEventListener("app:new-conversation", handleNewConversation);
      };
    }
  }, []);

  // 语言切换
  useEffect(() => {
    if (typeof window !== "undefined") {
      try {
        const storedLang = localStorage.getItem("siteLang") || "zh";
        setSiteLang(storedLang);
      } catch (error) {
        console.error("Failed to load language:", error);
      }
    }
  }, []);

  // 建议问题轮换
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentSuggestionSet(prev => {
        const next = (prev + 1) % suggestionSets.length;
        setSuggestions(suggestionSets[next]);
        return next;
      });
    }, 8000);
    return () => clearInterval(interval);
  }, []);

  // 初始化建议问题
  useEffect(() => {
    setSuggestions(suggestionSets[0]);
  }, []);

  // 动态问候语
  useEffect(() => {
    function computeGreeting(): string {
      const displayName = (session?.user?.name as string | undefined) || undefined;
      const l = siteLang;
      const hour = new Date().getHours();
      let prefix = "";
      if (l === "en") {
        prefix = hour < 12 ? "Good morning! What would you like to explore today?" : hour < 18 ? "Good afternoon! Ready for new discoveries?" : "Good evening! How was your day?";
      } else if (l === "ja") {
        prefix = hour < 12 ? "おはようございます" : hour < 18 ? "こんにちは" : "こんばんは";
      } else if (l === "ko") {
        prefix = hour < 12 ? "좋은 아침" : hour < 18 ? "좋은 오후" : "좋은 저녁";
      } else {
        prefix = hour < 5 ? "夜深了，有什么需要帮助的吗？" : hour < 12 ? "早上好！今天想了解什么？" : hour < 14 ? "中午好！有什么问题需要解答？" : hour < 18 ? "下午好！准备好开始新的探索了吗？" : "晚上好！今天过得怎么样？";
      }
      return displayName ? `${prefix}，${displayName}` : `${prefix}`;
    }
    
    if (typeof window !== "undefined") {
    setGreeting(computeGreeting());
    const timer = window.setInterval(() => setGreeting(computeGreeting()), 60 * 1000);
    return () => window.clearInterval(timer);
    }
  }, [session?.user?.name, siteLang]);

  // 自动滚动到底部
  useEffect(() => {
    if (autoScroll && listRef.current) {
      const scrollToBottom = () => {
        listRef.current?.scrollTo({
          top: listRef.current.scrollHeight,
          behavior: 'smooth'
        });
      };
      
      // 延迟滚动，确保DOM更新完成
      const timeoutId = setTimeout(scrollToBottom, 100);
      return () => clearTimeout(timeoutId);
    }
  }, [messages, autoScroll]);

  // 当新消息添加时自动滚动
  useEffect(() => {
    if (listRef.current && messages.length > 0) {
      const lastMessage = messages[messages.length - 1];
      if (lastMessage.role === 'assistant' && lastMessage.content) {
        const scrollToBottom = () => {
          listRef.current?.scrollTo({
            top: listRef.current.scrollHeight,
            behavior: 'smooth'
          });
        };
        
        // 延迟滚动，确保内容渲染完成
        const timeoutId = setTimeout(scrollToBottom, 200);
        return () => clearTimeout(timeoutId);
      }
    }
  }, [messages]);

  // 输入变化处理
  useEffect(() => {
    if (typingTimeout) {
      clearTimeout(typingTimeout);
    }
    
    if (input.trim()) {
      setIsTyping(true);
      const timeout = setTimeout(() => {
        setIsTyping(false);
      }, 1000);
      setTypingTimeout(timeout);
    } else {
      setIsTyping(false);
    }
    
    return () => {
      if (typingTimeout) {
        clearTimeout(typingTimeout);
      }
    };
  }, [input, typingTimeout]);

  // 活动时间更新
  useEffect(() => {
    const updateActivity = () => setLastActivity(new Date());
    window.addEventListener('mousemove', updateActivity);
    window.addEventListener('keypress', updateActivity);
    return () => {
      window.removeEventListener('mousemove', updateActivity);
      window.removeEventListener('keypress', updateActivity);
    };
  }, []);

  // 当用户登录状态改变时加载历史记录
  useEffect(() => {
    if (status === "authenticated" && session?.user) {
      // 直接在这里调用API，避免循环依赖
      const loadConversationsDirect = async () => {
    try {
      const res = await fetch("/api/conversations", {
            method: 'GET',
            headers: {
              'Cache-Control': 'no-cache',
              'Pragma': 'no-cache'
            },
            cache: 'no-store'
          });
          
          if (!res.ok) {
            throw new Error(`HTTP ${res.status}`);
          }
          
      const data = await res.json();
          
          if (Array.isArray(data?.conversations)) {
            const list = data.conversations.map((c: any) => ({ 
              id: c.id, 
              title: c.title || `对话 ${c.id.slice(-6)}` 
            }));
            setConversations(list);
            
            if (list.length > 0) {
              setSidebarOpen(true);
            }
          } else {
            setConversations([]);
          }
        } catch (error) {
          console.error("Failed to load conversations:", error);
          setConversations([]);
        }
      };
      
      loadConversationsDirect();
    } else {
      setConversations([]);
      setSidebarOpen(false);
    }
  }, [status, session?.user]);

  // 加载对话历史
  const loadConversations = useCallback(async () => {
    // 只有登录用户才能加载历史记录
    if (status !== "authenticated" || !session?.user) {
      setConversations([]);
      return;
    }

    try {
      const res = await fetch("/api/conversations", {
        method: 'GET',
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        },
        cache: 'no-store'
      });
      
      if (!res.ok) {
        throw new Error(`HTTP ${res.status}`);
      }
      
      const data = await res.json();
      
      if (Array.isArray(data?.conversations)) {
        const list = data.conversations.map((c: any) => ({ 
          id: c.id, 
          title: c.title || `对话 ${c.id.slice(-6)}` 
        }));
        setConversations(list);
        
        if (list.length > 0) {
          setSidebarOpen(true);
          }
        } else {
        setConversations([]);
      }
    } catch (error) {
      console.error("Failed to load conversations:", error);
      setConversations([]);
    }
  }, [status, session?.user]);

  // 选择对话
  const selectConversation = useCallback(async (id: string) => {
    try {
      if (!id || typeof id !== 'string') {
        return;
      }
      
    setConversationId(id);
    setShowHero(false);
      setMessages([]);
      
      const res = await fetch(`/api/conversations/${id}/messages`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Cache-Control': 'no-cache'
        }
      });
      
      if (!res.ok) {
        setMessages([]);
        return;
      }
      
      const data = await res.json();
      
      if (Array.isArray(data?.messages)) {
        const ui: UiMessage[] = data.messages.map((m: any, index: number) => ({ 
          id: m.id || `msg_${index}_${m.role}`, 
          role: m.role === "assistant" ? "assistant" : "user", 
          content: m.content || ""
        }));
        setMessages(ui);
      } else {
        setMessages([]);
      }
    } catch (error) {
      console.error("Failed to load messages:", error);
      setMessages([]);
    }
  }, []);

  // 新建对话
  const newConversation = useCallback(() => {
      console.log('newConversation called');
      setConversationId(null);
      setMessages([]);
      setShowHero(true);
      setToast('开始新对话');
      setTimeout(() => setToast(''), 2000);
  }, []);

  // 发送消息
  const sendMessage = async (e: React.FormEvent) => {
    e.preventDefault();
    if ((!input.trim() && pending.images.length === 0 && pending.files.length === 0) || loading) return;

    // 构建用户消息内容，包含文本和附件信息
    let messageContent = input.trim();
    
    // 如果有附件，添加附件信息到消息内容中
    if (pending.images.length > 0 || pending.files.length > 0) {
      const attachmentInfo = [];
      
      if (pending.images.length > 0) {
        attachmentInfo.push(`[图片 ${pending.images.length} 张]`);
      }
      
      if (pending.files.length > 0) {
        const fileNames = pending.files.map(f => f.name).join(', ');
        attachmentInfo.push(`[文件: ${fileNames}]`);
      }
      
      if (attachmentInfo.length > 0) {
        messageContent = messageContent ? 
          `${messageContent}\n\n${attachmentInfo.join(' ')}` : 
          attachmentInfo.join(' ');
      }
    }

    const userMsg: UiMessage = {
      id: `user_${Date.now()}`,
      role: "user",
      content: messageContent,
      createdAt: new Date().toISOString(),
    };
    setMessages(prev => {
      const newMessages = [...prev, userMsg];
      // 生成对话标题
      const title = generateConversationTitle(newMessages);
      setConversationTitle(title);
      return newMessages;
    });
    setInput("");
    setLoading(true);
      setShowHero(false);
    setMessageCount(prev => prev + 1);

    // 如果开启深度思考模式，显示推理过程
    if (thinkMode) {
      setIsThinking(true);
      setThinkingSteps([]);
      
      // 模拟推理步骤 - 使用更短的延迟
      const steps = [
        "分析问题背景和关键信息...",
        "识别问题的核心要点...",
        "考虑多种可能的解决方案...",
        "评估每种方案的优缺点...",
        "选择最佳解决方案...",
        "验证解决方案的可行性...",
        "准备最终答案..."
      ];
      
      // 使用requestAnimationFrame来避免阻塞UI
      for (let i = 0; i < steps.length; i++) {
        await new Promise(resolve => {
          setTimeout(() => {
            setThinkingSteps(prev => [...prev, steps[i]]);
            resolve(void 0);
          }, 500); // 增加延迟时间让用户能看到
        });
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
      setIsThinking(false);
    }

    try {
      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          messages: [
            { role: "system", content: "你是一个有用的AI助手。" },
            ...messages,
            userMsg
          ].map(m => ({ role: m.role, content: m.content })),
          model: "deepseek-chat",
          stream: true,
          conversationId: conversationId,
          web: webEnabled,
          attachments: {
            ...pending,
            imageEditPrompt: imageEditPrompt.trim() || undefined
          }
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const assistantId = `assistant_${Date.now()}`;
      setMessages(prev => [...prev, { id: assistantId, role: "assistant", content: "", createdAt: new Date().toISOString() }]);

      const reader = response.body?.getReader();
      const decoder = new TextDecoder();
      let fullContent = "";

      if (reader) {
        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          const chunk = decoder.decode(value, { stream: true });
          fullContent += chunk;

          setMessages(prev => prev.map(m => 
            m.id === assistantId ? { ...m, content: fullContent } : m
          ));
        }
      }

      // 清空附件
      setPending({ images: [], files: [] });
      setImageEditPrompt("");
      
      // 重新加载对话列表
      loadConversations();
    } catch (error) {
      console.error("Error:", error);
      setMessages(prev => [...prev, { 
        id: `error_${Date.now()}`, 
        role: "assistant",
        content: "抱歉，发生了错误。" 
      }]);
    } finally {
      setLoading(false);
    }
  };


  // 文件上传处理
  const addFilesFromList = useCallback(async (files: FileList | File[]) => {
    const images: string[] = [];
    const texts: Array<{ name: string; content: string }> = [];
    
    // 如果有文件上传，自动切换到聊天模式
    if (files.length > 0) {
      setShowHero(false);
    }
    
    for (const file of Array.from(files)) {
      if (file.type.startsWith("image/")) {
        const url = await new Promise<string>((resolve) => {
          const reader = new FileReader();
          reader.onload = () => resolve(String(reader.result || ""));
          reader.readAsDataURL(file);
        });
        images.push(url);
      } else {
        // 对于非图片文件，尝试读取为文本
        try {
          const text = await file.text();
          texts.push({ name: file.name, content: text });
        } catch (error) {
          // 对于二进制文件（如PDF），尝试使用不同的方法读取
          try {
            // 尝试使用ArrayBuffer读取
            const arrayBuffer = await file.arrayBuffer();
            const uint8Array = new Uint8Array(arrayBuffer);
            
            // 检查是否是PDF文件
            if (file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf')) {
              const fileInfo = `文件: ${file.name}\n类型: ${file.type}\n大小: ${(file.size / 1024).toFixed(2)} KB\n\n注意: 这是一个PDF文件，无法直接读取文本内容。请将PDF内容复制粘贴到聊天框中，或者将PDF转换为文本格式后上传。`;
              texts.push({ name: file.name, content: fileInfo });
            } else {
              // 对于其他二进制文件，尝试转换为base64
              const base64 = btoa(String.fromCharCode(...uint8Array));
              const fileInfo = `文件: ${file.name}\n类型: ${file.type}\n大小: ${(file.size / 1024).toFixed(2)} KB\n\n注意: 这是一个二进制文件，无法直接读取文本内容。文件已上传，但需要您描述文件内容或将其转换为文本格式。`;
              texts.push({ name: file.name, content: fileInfo });
            }
          } catch (bufferError) {
            // 如果所有方法都失败，记录基本信息
            const fileInfo = `文件: ${file.name}\n类型: ${file.type}\n大小: ${(file.size / 1024).toFixed(2)} KB\n\n注意: 无法读取此文件的内容。请将文件内容复制粘贴到聊天框中，或者将文件转换为文本格式后上传。`;
            texts.push({ name: file.name, content: fileInfo });
          }
        }
      }
    }
    
    setPending(prev => ({
      images: [...prev.images, ...images],
      files: [...prev.files, ...texts]
    }));
    
    // 触感反馈
    if (typeof window !== "undefined" && 'vibrate' in navigator) {
      navigator.vibrate(50);
    }
  }, []);

  // 移除待发送图片
  const removePendingImage = useCallback((index: number) => {
    setPending(prev => ({
      ...prev,
      images: Array.isArray(prev.images) ? prev.images.filter((_, i) => i !== index) : []
    }));
  }, []);

  // 移除待发送文件
  const removePendingFile = useCallback((index: number) => {
    setPending(prev => ({
      ...prev,
      files: Array.isArray(prev.files) ? prev.files.filter((_, i) => i !== index) : []
    }));
  }, []);

  // 语音输入
  const startVoiceInput = useCallback(() => {
    if (typeof window === "undefined") return;
    
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      setToast("当前浏览器不支持语音输入");
      setTimeout(() => setToast(""), 1500);
      return;
    }

    const Recognition = (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;
    const recognition = new Recognition();
    
    recognition.lang = siteLang === 'en' ? 'en-US' : 'zh-CN';
    recognition.continuous = false;
    recognition.interimResults = false;

    recognition.onstart = () => {
      setRecording(true);
      setToast("正在听取...");
    };

    recognition.onresult = (event: any) => {
      const transcript = event.results[0][0].transcript;
      setInput(transcript);
      setToast("语音识别完成");
      setTimeout(() => setToast(""), 1500);
    };

    recognition.onerror = () => {
      setRecording(false);
      setToast("语音识别失败");
      setTimeout(() => setToast(""), 1500);
    };

    recognition.onend = () => {
      setRecording(false);
    };

    recognition.start();
  }, [siteLang]);

  const stopVoiceInput = useCallback(() => {
    setRecording(false);
  }, []);

  // 图片生成
  const generateImage = useCallback(async (prompt: string) => {
    if (!prompt.trim()) return;
    
    setLoading(true);
    try {
      const response = await fetch("/api/generate-image", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt: prompt.trim() }),
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success && data.imageUrl) {
        setPending(prev => ({
          ...prev,
          images: [...prev.images, data.imageUrl]
        }));
        setInput(`根据提示词"${prompt}"生成的图像已准备就绪，可以发送给AI进行分析或修改`);
        setToast("图片生成成功！");
        setTimeout(() => setToast(""), 2000);
    } else {
        setToast("图片生成失败");
        setTimeout(() => setToast(""), 2000);
      }
    } catch (error) {
      console.error("Error generating image:", error);
      setToast("图片生成失败");
      setTimeout(() => setToast(""), 2000);
    } finally {
      setLoading(false);
    }
  }, []);

  // 复制消息
  const copyMessage = useCallback(async (text: string) => {
    if (typeof window === "undefined") return;
    try {
      await navigator.clipboard.writeText(text);
      setToast("已复制到剪贴板");
      setTimeout(() => setToast(""), 1500);
    } catch (error) {
      console.error("Failed to copy:", error);
    }
  }, []);

  // 删除消息
  const deleteMessage = useCallback((messageId: string) => {
    setMessages(prev => prev.filter(m => m.id !== messageId));
    setShowMessageActions(null);
  }, []);

  // 选择消息
  const toggleMessageSelection = useCallback((messageId: string) => {
    setSelectedMessages(prev => {
      const newSet = new Set(prev);
      if (newSet.has(messageId)) {
        newSet.delete(messageId);
      } else {
        newSet.add(messageId);
      }
      return newSet;
    });
  }, []);
  
  return (
    <div className="h-screen bg-white dark:bg-gray-900 flex flex-col overflow-hidden transition-colors duration-300">
      {/* 顶部导航 - 固定高度 */}
      <div className="h-16 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between px-4 flex-shrink-0 shadow-lg transition-colors duration-300">
        <div className="flex items-center gap-4">
          <button
            onClick={() => {
              console.log('Sidebar toggle clicked, current state:', sidebarOpen);
              setSidebarOpen(!sidebarOpen);
              setToast(sidebarOpen ? '关闭侧边栏' : '打开侧边栏');
              // 触感反馈
              if (typeof window !== "undefined" && 'vibrate' in navigator) {
                navigator.vibrate(50);
              }
            }}
            className="p-2 rounded-lg hover:bg-gray-100 text-gray-600 transition-colors"
          >
            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M3 12h18M3 6h18M3 18h18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
          </button>
          <div className="flex items-center gap-2">
            <div className="w-8 h-8 bg-gradient-to-r from-orange-400 via-yellow-400 via-green-400 via-blue-400 to-purple-500 rounded-lg flex items-center justify-center shadow-lg">
              <span className="text-white font-bold text-sm">J</span>
            </div>
            <span className="text-lg font-semibold bg-gradient-to-r from-orange-500 via-yellow-500 via-green-500 via-blue-500 to-purple-500 bg-clip-text text-transparent">
              Jenrych
            </span>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <span className="text-sm text-gray-500">Status: {status}</span>
          <select
            value={siteLang}
            onChange={(e) => {
              setSiteLang(e.target.value);
    if (typeof window !== "undefined") {
                try {
                  localStorage.setItem("siteLang", e.target.value);
                  // 触感反馈
                  if ('vibrate' in navigator) {
                    navigator.vibrate(30);
                  }
                } catch (error) {
                  console.error("Failed to save language:", error);
                }
              }
            }}
            className="px-2 py-1 border border-gray-300 rounded text-sm text-gray-600"
          >
            <option value="zh">中文</option>
            <option value="en">English</option>
          </select>
          </div>
      </div>

      {/* 主内容区 - 使用flex布局 */}
      <div className="flex flex-1 min-h-0">
        {/* 侧边栏 */}
        <motion.div
          initial={false}
          animate={{ 
            width: sidebarOpen ? 280 : 0,
            opacity: sidebarOpen ? 1 : 0,
            x: sidebarOpen ? 0 : -280
          }}
          transition={{ 
            duration: 0.3,
            ease: "easeInOut"
          }}
          className={`bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-hidden flex-shrink-0 flex flex-col relative z-20 transition-colors duration-300 ${sidebarOpen ? 'pointer-events-auto' : 'pointer-events-none'}`}
        >
        <div className="p-4 flex-shrink-0">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-200">{currentT.historyDialog}</h2>
          </div>
            <div className="flex gap-2">
                  <button 
                onClick={() => {
                  console.log('New conversation clicked');
                  newConversation();
                  // 触感反馈
                  if (typeof window !== "undefined" && 'vibrate' in navigator) {
                    navigator.vibrate(30);
                  }
                }}
                className="p-2 rounded-lg hover:bg-gray-100 text-gray-600 transition-colors"
                title="新建对话"
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 4v16M4 12h16" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                </svg>
                  </button>
                </div>
          </div>
          
          {/* 登录状态提示 */}
          {status !== "authenticated" && (
            <motion.div
              initial={{ opacity: 0, y: -10 }}
              animate={{ opacity: 1, y: 0 }}
              className="mb-4 p-3 bg-gradient-to-r from-orange-50 to-purple-50 border border-orange-200 rounded-lg"
            >
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-gradient-to-r from-orange-400 to-purple-500 rounded-full"></div>
                <span className="text-sm text-gray-600">
                  {currentT.pleaseLogin}
                </span>
              </div>
            </motion.div>
          )}
          
          {showSettings && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="mb-4 p-3 bg-gray-50 rounded-lg"
            >
              <div className="space-y-3">
                <h3 className="font-semibold text-gray-800 mb-2">设置</h3>
                
                <div className="space-y-2">
                  <label className="flex items-center gap-2 text-sm text-gray-600">
                    <input
                      type="checkbox"
                      checked={autoScroll}
                      onChange={(e) => setAutoScroll(e.target.checked)}
                      className="rounded"
                    />
                    自动滚动
                  </label>
                  
                  <div className="text-xs text-gray-500">
                    消息数: {messageCount}
            </div>
                  
                  <div className="text-xs text-gray-500">
                    最后活动: {lastActivity ? lastActivity.toLocaleTimeString() : "无"}
                  </div>
                </div>
              </div>
            </motion.div>
          )}
          
          <div className="flex-1 overflow-y-auto space-y-2">
            {conversations.length > 0 ? (
              conversations.map((conv, index) => (
                <motion.button
                  key={conv.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    selectConversation(conv.id);
                    // 触感反馈
                    if (typeof window !== "undefined" && 'vibrate' in navigator) {
                      navigator.vibrate(30);
                    }
                  }}
                  className={`w-full text-left p-3 rounded-lg hover:bg-gray-100 text-gray-700 transition-all duration-200 relative z-40 pointer-events-auto ${
                    conversationId === conv.id 
                      ? 'bg-gradient-to-r from-blue-50 to-purple-50 text-blue-700 border border-blue-200' 
                      : 'hover:border-gray-200 border border-transparent'
                  }`}
                  whileHover={{ scale: 1.02, x: 4 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <div className="flex items-center gap-2">
                    <div className={`w-2 h-2 rounded-full ${
                      conversationId === conv.id 
                        ? 'bg-gradient-to-r from-orange-400 to-purple-500' 
                        : 'bg-gray-300'
                    }`}></div>
                    <span className="truncate">{conv.title || conversationTitle || `对话 ${index + 1}`}</span>
                  </div>
                </motion.button>
              ))
            ) : status === "authenticated" ? (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-8 text-gray-500"
              >
                <div className="w-12 h-12 mx-auto mb-3 bg-gradient-to-r from-orange-100 to-purple-100 rounded-full flex items-center justify-center">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
            </div>
                <p className="text-sm">{currentT.noHistory}</p>
                <p className="text-xs text-gray-400 mt-1">{currentT.startNew}</p>
              </motion.div>
            ) : (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-8 text-gray-500"
              >
                <div className="w-12 h-12 mx-auto mb-3 bg-gradient-to-r from-orange-100 to-purple-100 rounded-full flex items-center justify-center">
                  <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2M9 11a4 4 0 100-8 4 4 0 000 8zM22 21v-2a4 4 0 00-3-3.87M16 3.13a4 4 0 010 7.75" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
        </div>
                <p className="text-sm">请先登录</p>
                <p className="text-xs text-gray-400 mt-1">登录后即可保存对话历史</p>
              </motion.div>
            )}
          </div>
        </div>
      </motion.div>

        {/* 主内容区 */}
        <div className="flex-1 flex flex-col overflow-hidden">

        {/* 欢迎界面 */}
        {showHero && (
          <div className="flex-1 flex flex-col items-center justify-center p-8">
            <div className="text-center max-w-2xl mb-12">
              <motion.h1 
                className="text-3xl font-bold mb-4 bg-gradient-to-r from-orange-500 via-yellow-500 via-green-500 via-blue-500 to-purple-500 bg-clip-text text-transparent"
                animate={{
                  backgroundPosition: ["0%", "100%", "0%"]
                }}
                transition={{
                  duration: 3,
                  repeat: Infinity,
                  ease: "easeInOut"
                }}
              >
                {greeting}
              </motion.h1>
              <motion.p 
                className="text-gray-600 text-lg"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.3 }}
              >
                {currentT.aiIntroduction}
              </motion.p>
            </div>

            {/* 建议问题 */}
            <div className="w-full max-w-4xl mb-12">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <AnimatePresence mode="wait">
                  {suggestions.map((suggestion, index) => (
                    <motion.button
                      key={`${currentSuggestionSet}-${index}`}
                      initial={{ opacity: 0, y: 20, scale: 0.9 }}
                      animate={{ opacity: 1, y: 0, scale: 1 }}
                      exit={{ opacity: 0, y: -20, scale: 0.9 }}
                      transition={{ 
                        duration: 0.4, 
                        delay: index * 0.1,
                        type: "spring",
                        stiffness: 300,
                        damping: 20
                      }}
                      onClick={() => {
                        setInput(suggestion);
                        heroInputRef.current?.focus();
                        // 触感反馈
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                      }}
                      className="p-4 text-left bg-white border border-gray-200 rounded-full hover:bg-gray-50 transition-all duration-300 text-gray-700 hover:border-blue-300 hover:shadow-lg hover:scale-105"
                      whileHover={{ 
                        scale: 1.05,
                        y: -2,
                        boxShadow: "0 10px 25px rgba(0,0,0,0.1)"
                      }}
                      whileTap={{ 
          scale: 0.95,
                        y: 0
                      }}
                    >
                      {suggestion}
                    </motion.button>
                  ))}
                </AnimatePresence>
              </div>
            </div>

            {/* 输入区域 */}
            <div className="w-full max-w-4xl">
        <motion.div
                initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.2 }}
                className="relative"
              >

                {/* 输入框 */}
                <motion.form 
                  onSubmit={sendMessage} 
                  className="relative w-full max-w-2xl mx-auto"
                  whileHover={{ scale: 1.02 }}
                  animate={{
                    scale: sidebarOpen ? 0.98 : 1,
                    x: sidebarOpen ? -20 : 0
                  }}
                  transition={{
                    type: "spring",
                    stiffness: 300,
                    duration: 0.3,
                    ease: "easeInOut"
                  }}
                >
                {/* 集成式输入框容器 */}
                <div className="relative bg-gray-100 dark:bg-gray-800 border-2 border-gray-300 dark:border-gray-600 rounded-2xl overflow-hidden focus-within:border-blue-500 focus-within:shadow-lg transition-all duration-300">
                    {/* 功能按钮行 - 集成到输入框内 */}
                    <div className="flex items-center gap-2 px-3 py-2 border-b border-gray-200 dark:border-gray-600">
                      <motion.button
                        onClick={() => {
                          setThinkMode(!thinkMode);
                          if (typeof window !== "undefined" && 'vibrate' in navigator) {
                            navigator.vibrate(30);
                          }
                          setToast(thinkMode ? currentT.disableDeepThinking : currentT.enableDeepThinking);
                          setTimeout(() => setToast(''), 2000);
                        }}
                        className={`flex items-center gap-1.5 px-3 py-1.5 text-sm rounded-lg border transition-all duration-300 ${
                          thinkMode 
                            ? 'bg-blue-500 border-blue-500 text-white shadow-lg' 
                            : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 hover:border-blue-300'
                        }`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <motion.div
                          animate={{ rotate: thinkMode ? 360 : 0 }}
                          transition={{ duration: 0.5 }}
                        >
                          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </motion.div>
                        {currentT.deepThinking}
                      </motion.button>
                      
                      <motion.button
                        onClick={() => {
                          setWebEnabled(!webEnabled);
                          if (typeof window !== "undefined" && 'vibrate' in navigator) {
                            navigator.vibrate(30);
                          }
                          setToast(webEnabled ? currentT.disableWebSearch : currentT.enableWebSearch);
                          setTimeout(() => setToast(''), 2000);
                        }}
                        className={`flex items-center gap-1.5 px-3 py-1.5 text-sm rounded-lg border transition-all duration-300 ${
                          webEnabled 
                            ? 'bg-blue-500 border-blue-500 text-white shadow-lg' 
                            : 'bg-white dark:bg-gray-700 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 hover:border-blue-300'
                        }`}
                        whileHover={{ scale: 1.02 }}
                        whileTap={{ scale: 0.98 }}
                      >
                        <motion.div
                          animate={{ rotate: webEnabled ? 360 : 0 }}
                          transition={{ duration: 0.5 }}
                        >
                          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2"/>
                            <path d="M2 12h20M12 2a15.3 15.3 0 014 10 15.3 15.3 0 01-4 10 15.3 15.3 0 01-4-10 15.3 15.3 0 014-10z" stroke="currentColor" strokeWidth="2"/>
                          </svg>
                        </motion.div>
                        {currentT.webSearch}
                      </motion.button>
                    </div>
                    
                    {/* 附件预览区域（在输入框内） */}
                    {(pending.images.length > 0 || pending.files.length > 0) && (
                      <div className="p-3 border-b border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-700">
                        <div className="flex flex-wrap gap-2 mb-2">
                          {pending.images.map((src, i) => (
                            <div key={`img-${i}`} className="relative w-16 h-16 rounded-lg overflow-hidden border">
                              <img src={src} alt="preview" className="w-full h-full object-cover" />
                              <button
                                onClick={() => removePendingImage(i)}
                                className="absolute -top-1 -right-1 bg-red-500 text-white rounded-full w-5 h-5 text-xs flex items-center justify-center"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                          {pending.files.map((f, i) => (
                            <div key={`file-${i}`} className="flex items-center gap-1 px-2 py-1 bg-blue-100 dark:bg-blue-900 rounded-lg text-xs">
                              <div className="w-4 h-4 bg-blue-500 rounded text-white text-xs flex items-center justify-center">F</div>
                              <span className="text-blue-700 dark:text-blue-300 max-w-20 truncate">{f.name}</span>
                              <button
                                onClick={() => removePendingFile(i)}
                                className="text-blue-500 hover:text-blue-700 dark:text-blue-300 dark:hover:text-blue-100 ml-1"
                              >
                                ×
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {/* 输入框 */}
                    <div className="flex items-center">
              <input
                ref={heroInputRef}
                        type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                        placeholder={currentT.startConversation}
                        className="flex-1 p-4 pr-24 text-gray-800 placeholder-gray-400 focus:outline-none bg-transparent"
                disabled={loading}
              />
                      
                      {/* 右侧按钮组 */}
                      <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-2">
                        <motion.button
                          type="button"
                          onClick={() => {
                            heroFileRef.current?.click();
                            // 触感反馈
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                          }}
                          className="p-2 text-gray-500 hover:text-blue-500 hover:bg-blue-50 rounded-lg transition-all duration-200"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          title="上传文件"
                        >
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M21.44 11.05l-9.19 9.19a6 6 0 01-8.49-8.49l9.19-9.19a4 4 0 015.66 5.66L9.64 16.2a2 2 0 01-2.83-2.83l8.49-8.49" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </motion.button>
                        
                        <motion.button
                          type="submit"
                          disabled={loading || (!input.trim() && pending.images.length === 0 && pending.files.length === 0)}
                          onClick={() => {
                            // 触感反馈
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(50);
                            }
                          }}
                          className="p-2 bg-blue-500 text-white rounded-lg disabled:opacity-50 hover:bg-blue-600 transition-all duration-200"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          title="发送消息"
                        >
                          <motion.div
                            animate={{ rotate: loading ? 360 : 0 }}
                            transition={{ duration: 1, repeat: loading ? Infinity : 0 }}
                          >
                            <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                              <path d="M22 2L11 13M22 2l-7 20-4-9-9-4 20-7z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                    </motion.div>
                        </motion.button>
                </div>
              </div>
                  </div>
                  
                  <input
                    ref={heroFileRef}
                  type="file"
                  accept="image/*,.txt,.md,.json,.csv,.log,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.zip,.rar,.7z"
                  multiple
                  onChange={async (e) => {
                    const files = Array.from(e.target.files || []);
                      await addFilesFromList(files);
                      e.currentTarget.value = '';
                  }}
                  className="hidden"
                />
                </motion.form>
            </motion.div>
          </div>
        </div>
        )}

        {/* 聊天区域 */}
        {!showHero && (
          <div className="flex-1 flex flex-col overflow-hidden bg-white dark:bg-gray-900 transition-colors duration-300">
            <div 
              ref={listRef} 
              className="flex-1 overflow-y-auto p-2 sm:p-4 space-y-4"
        onDragOver={(e) => { e.preventDefault(); setDragOver(true); }}
        onDragLeave={() => setDragOver(false)}
        onDrop={async (e) => {
          e.preventDefault();
          setDragOver(false);
          await addFilesFromList(e.dataTransfer.files);
        }}
      >
            <AnimatePresence>
              {/* 思考过程显示 */}
              {isThinking && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="mb-4 p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl"
                >
                  <div className="flex items-center gap-3 mb-3">
                    <motion.div
                      className="w-8 h-8 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full flex items-center justify-center"
                      animate={{ rotate: 360 }}
                      transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                    >
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                    </motion.div>
                    <div>
                      <div className="font-semibold text-blue-700">深度思考中...</div>
                      <div className="text-sm text-blue-600">AI正在分析问题并生成最佳答案</div>
                  </div>
                    </div>
                  <div className="space-y-2">
                    {thinkingSteps.map((step, index) => (
                      <motion.div
                        key={index}
                        initial={{ opacity: 0, x: -20 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.1 }}
                        className="flex items-center gap-2 text-sm text-gray-700"
                      >
                        <motion.div
                          className="w-2 h-2 bg-blue-500 rounded-full"
                          animate={{ scale: [1, 1.2, 1] }}
                          transition={{ duration: 1, repeat: Infinity, delay: index * 0.1 }}
                        />
                        {step}
                      </motion.div>
                ))}
                    </div>
                </motion.div>
              )}
              
              {/* AI回答时的简化思考动画 */}
              {loading && (
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className="flex justify-start"
                >
                  <div className="max-w-[85%] sm:max-w-[80%] p-3 sm:p-4 rounded-lg bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600">
                    <div className="flex items-center gap-3">
                      <div className="w-8 h-8 rounded-full flex items-center justify-center bg-gradient-to-r from-orange-400 via-yellow-400 via-green-400 via-blue-400 to-purple-500 shadow-lg">
                        <span className="text-white text-sm font-bold">AI</span>
                  </div>
                      <div className="flex items-center gap-2">
                        <div className="flex space-x-1">
                          <motion.div
                            className="w-1.5 h-1.5 bg-blue-500 rounded-full"
                            animate={{ opacity: [0.4, 1, 0.4] }}
                            transition={{ duration: 1.5, repeat: Infinity, delay: 0 }}
                          />
                          <motion.div
                            className="w-1.5 h-1.5 bg-blue-500 rounded-full"
                            animate={{ opacity: [0.4, 1, 0.4] }}
                            transition={{ duration: 1.5, repeat: Infinity, delay: 0.3 }}
                          />
                          <motion.div
                            className="w-1.5 h-1.5 bg-blue-500 rounded-full"
                            animate={{ opacity: [0.4, 1, 0.4] }}
                            transition={{ duration: 1.5, repeat: Infinity, delay: 0.6 }}
                          />
              </div>
                        <span className="text-sm text-gray-500 dark:text-gray-400">{currentT.aiThinking}</span>
            </div>
          </div>
                  </div>
                </motion.div>
              )}

              {messages.map((message) => (
                <motion.div
                  key={message.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  exit={{ opacity: 0, y: -20 }}
                  className={`flex ${message.role === "user" ? "justify-end" : "justify-start"}`}
                >
                  <div
                    className={`max-w-[85%] sm:max-w-[80%] p-3 sm:p-4 rounded-lg ${
                      message.role === "user"
                        ? "bg-blue-500 text-white"
                        : "bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 text-gray-800 dark:text-gray-200 border border-gray-200 dark:border-gray-600"
                    }`}
                  >
                    <div className="flex items-center justify-between mb-2">
                      <div className="flex items-center gap-2">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center shadow-lg ${
                          message.role === "user" 
                            ? "bg-blue-600" 
                            : "bg-gradient-to-r from-orange-400 via-yellow-400 via-green-400 via-blue-400 to-purple-500"
                        }`}>
                          <motion.span 
                            className="text-white font-bold text-sm"
                            animate={message.role === "assistant" ? {
                              background: [
                                "linear-gradient(45deg, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4, #feca57)",
                                "linear-gradient(45deg, #feca57, #ff6b6b, #4ecdc4, #45b7d1, #96ceb4)",
                                "linear-gradient(45deg, #96ceb4, #feca57, #ff6b6b, #4ecdc4, #45b7d1)",
                                "linear-gradient(45deg, #45b7d1, #96ceb4, #feca57, #ff6b6b, #4ecdc4)",
                                "linear-gradient(45deg, #4ecdc4, #45b7d1, #96ceb4, #feca57, #ff6b6b)"
                              ]
                            } : {}}
                            transition={{
                              duration: 3,
                              repeat: Infinity,
                              ease: "linear"
                            }}
                          >
                            {message.role === "user" ? "U" : "AI"}
                          </motion.span>
                        </div>
                        <div className="font-semibold text-sm">
                          {message.role === "user" ? "You" : currentT.aiAssistant}
                        </div>
                      </div>
                      
                    
                    <motion.div 
                      className="prose prose-sm max-w-none"
                      initial={{ opacity: 0 }}
                      animate={{ opacity: 1 }}
                      transition={{ duration: 0.3 }}
                    >
                      <ReactMarkdown 
                        remarkPlugins={[remarkGfm]}
                        rehypePlugins={[rehypeHighlight]}
                      >
                        {message.content}
                      </ReactMarkdown>
                    </motion.div>
                    
                    {/* AI消息的操作按钮 - 右下角 */}
                    {message.role === "assistant" && (
                      <div className="flex items-center justify-end gap-2 mt-3">
                        <motion.button
                          onClick={() => {
                            // 重新生成答案
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            setToast(currentT.regenerating);
                            setTimeout(() => setToast(''), 2000);
                            // 这里可以添加重新生成的逻辑
                          }}
                          className="p-2 text-gray-400 hover:text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded-lg transition-colors"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          title={currentT.regenerating}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 4v6h6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M23 20v-6h-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </motion.button>
                        
                        <motion.button
                          onClick={() => {
                            // 复制消息
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            navigator.clipboard.writeText(message.content);
                            setToast(currentT.copiedToClipboard);
                            setTimeout(() => setToast(''), 2000);
                          }}
                          className="p-2 text-gray-400 hover:text-green-500 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition-colors"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          title={currentT.copiedToClipboard}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="9" y="9" width="13" height="13" rx="2" ry="2" stroke="currentColor" strokeWidth="2"/>
                            <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" strokeWidth="2"/>
                          </svg>
                        </motion.button>
                        
                        <motion.button
                          onClick={() => {
                            // 分享对话
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            const shareData = {
                              title: 'AI对话分享',
                              text: `AI助手: ${message.content}`,
                              url: window.location.href
                            };
                            
                            if (navigator.share) {
                              navigator.share(shareData);
                            } else {
                              // 降级到复制链接
                              navigator.clipboard.writeText(window.location.href);
                              setToast(currentT.linkCopiedToClipboard);
                              setTimeout(() => setToast(''), 2000);
                            }
                          }}
                          className="p-2 text-gray-400 hover:text-purple-500 hover:bg-purple-50 dark:hover:bg-purple-900/20 rounded-lg transition-colors"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          title={currentT.share}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <circle cx="18" cy="5" r="3" stroke="currentColor" strokeWidth="2"/>
                            <circle cx="6" cy="12" r="3" stroke="currentColor" strokeWidth="2"/>
                            <circle cx="18" cy="19" r="3" stroke="currentColor" strokeWidth="2"/>
                            <line x1="8.59" y1="13.51" x2="15.42" y2="17.49" stroke="currentColor" strokeWidth="2"/>
                            <line x1="15.41" y1="6.51" x2="8.59" y2="10.49" stroke="currentColor" strokeWidth="2"/>
                          </svg>
                        </motion.button>
                      </div>
                    )}
                  </div>
                    
                    {/* 用户消息的编辑按钮 */}
                    {message.role === "user" && (
                      <motion.div
                        className="flex gap-2 mt-3 justify-end"
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.5 }}
                      >
                        <motion.button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            // 将消息内容填入输入框进行编辑
                            setInput(message.content);
                            setToast('消息已填入输入框，可以编辑后重新发送');
                            setTimeout(() => setToast(''), 3000);
                          }}
                          className="p-2 rounded-full bg-blue-100 hover:bg-blue-200 text-blue-600"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M11 4H4a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2v-7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                        </motion.button>
                      </motion.div>
                    )}
                    
                    {/* AI回答后的反馈按钮 */}
                    {message.role === "assistant" && (
                      <motion.div
                        className="flex gap-2 mt-3 justify-end"
                        initial={{ opacity: 0, y: 10 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ delay: 0.5 }}
                      >
                        <motion.button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            // 重新生成回答
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            setToast('正在重新生成回答...');
                            setTimeout(() => setToast(''), 2000);
                          }}
                          className="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M1 4v6h6M23 20v-6h-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            <path d="M20.49 9A9 9 0 005.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 013.51 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                              </motion.button>
                        <motion.button
                          onClick={async (e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            try {
                              await navigator.clipboard.writeText(message.content);
                              setToast('内容已复制到剪贴板！');
                            } catch (err) {
                              // 降级方案
                              const textArea = document.createElement('textarea');
                              textArea.value = message.content;
                              document.body.appendChild(textArea);
                              textArea.select();
                              document.execCommand('copy');
                              document.body.removeChild(textArea);
                              setToast('内容已复制到剪贴板！');
                            }
                            setTimeout(() => setToast(''), 2000);
                          }}
                          className="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <rect x="9" y="9" width="13" height="13" rx="2" ry="2" stroke="currentColor" strokeWidth="2" fill="none"/>
                            <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1" stroke="currentColor" strokeWidth="2" fill="none"/>
                          </svg>
                              </motion.button>
                        <motion.button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            // 点赞
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            setToast('感谢您的反馈！');
                            setTimeout(() => setToast(''), 2000);
                          }}
                          className="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M14 9V5a3 3 0 00-3-3l-4 9v11h11.28a2 2 0 002-1.7l1.38-9a2 2 0 00-2-2.3zM7 22H4a2 2 0 01-2-2v-7a2 2 0 012-2h3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                              </motion.button>
                        <motion.button
                          onClick={(e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            // 点踩
                            if (typeof window !== "undefined" && 'vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            setToast('我们会改进回答质量！');
                            setTimeout(() => setToast(''), 2000);
                          }}
                          className="p-2 rounded-full bg-gray-100 hover:bg-gray-200 text-gray-600"
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                        >
                          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M10 15v4a3 3 0 003 3l4-9V2H5.72a2 2 0 00-2 1.7l-1.38 9a2 2 0 002 2.3zm7-13h2.28a2 2 0 012 1.7l1.38 9a2 2 0 01-2 2.3H17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          </svg>
                              </motion.button>
                      </motion.div>
                    )}
                </div>
                </motion.div>
              ))}
            </AnimatePresence>
            
            {/* 开启新对话按钮 */}
            <motion.div
              className="flex justify-center mt-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <motion.button
                onClick={() => {
                  newConversation();
                  // 触感反馈
                  if (typeof window !== "undefined" && 'vibrate' in navigator) {
                    navigator.vibrate(30);
                  }
                }}
                className="flex items-center gap-2 px-6 py-3 bg-white border border-gray-300 rounded-full text-gray-600 hover:bg-gray-50 hover:border-blue-300 transition-all duration-300"
                whileHover={{ scale: 1.05, y: -2 }}
                whileTap={{ scale: 0.95 }}
              >
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M12 4v16M4 12h16" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                </svg>
                {currentT.newConversation}
              </motion.button>
            </motion.div>
          </div>
          </div>
        )}
      </div>

      {/* 设置模态框 */}
      {showSettings && (
        <div className="fixed inset-0 bg-white/20 backdrop-blur-sm flex items-center justify-center z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-4xl h-96 flex flex-col sm:flex-row overflow-hidden mx-4 sm:mx-0 transition-colors duration-300"
          >
            {/* 左侧导航 */}
            <div className="w-full sm:w-64 bg-gray-50 dark:bg-gray-700 p-4 sm:p-6 border-b sm:border-b-0 sm:border-r border-gray-200 dark:border-gray-600 transition-colors duration-300">
              <h2 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mb-6">{currentT.systemSettings}</h2>
              <nav className="space-y-2">
        <motion.button
          onClick={() => { 
                    setSettingsTab('general');
                    if (typeof window !== "undefined" && 'vibrate' in navigator) {
                      navigator.vibrate(30);
                    }
                  }}
                  className={`w-full flex items-center gap-3 px-3 py-2 text-left rounded-lg transition-colors ${
                    settingsTab === 'general' 
                      ? 'text-gray-700 bg-blue-50 border border-blue-200' 
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                  whileHover={{ scale: 1.02, x: 4 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 00-1.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  {currentT.generalSettings}
        </motion.button>
        <motion.button
                  onClick={() => {
                    setSettingsTab('account');
                    if (typeof window !== "undefined" && 'vibrate' in navigator) {
                      navigator.vibrate(30);
                    }
                  }}
                  className={`w-full flex items-center gap-3 px-3 py-2 text-left rounded-lg transition-colors ${
                    settingsTab === 'account' 
                      ? 'text-gray-700 bg-blue-50 border border-blue-200' 
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                  whileHover={{ scale: 1.02, x: 4 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <circle cx="12" cy="7" r="4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  {currentT.accountManagement}
        </motion.button>
                <motion.button 
                  onClick={() => {
                    setSettingsTab('agreement');
                    if (typeof window !== "undefined" && 'vibrate' in navigator) {
                      navigator.vibrate(30);
                    }
                  }}
                  className={`w-full flex items-center gap-3 px-3 py-2 text-left rounded-lg transition-colors ${
                    settingsTab === 'agreement' 
                      ? 'text-gray-700 bg-blue-50 border border-blue-200' 
                      : 'text-gray-600 hover:bg-gray-100'
                  }`}
                  whileHover={{ scale: 1.02, x: 4 }}
                  whileTap={{ scale: 0.98 }}
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M14 2H6a2 2 0 00-2 2v16a2 2 0 002 2h12a2 2 0 002-2V8z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <polyline points="14,2 14,8 20,8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <line x1="16" y1="13" x2="8" y2="13" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <line x1="16" y1="17" x2="8" y2="17" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <polyline points="10,9 9,9 8,9" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  {currentT.serviceAgreement}
        </motion.button>
              </nav>
              </div>

            {/* 右侧内容 */}
            <div className="flex-1 p-4 sm:p-6 overflow-y-auto">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-gray-800">
                  {settingsTab === 'general' && currentT.generalSettings}
                  {settingsTab === 'account' && currentT.accountManagement}
                  {settingsTab === 'agreement' && currentT.serviceAgreement}
                </h3>
        <motion.button
                  onClick={() => {
                    setShowSettings(false);
                    if (typeof window !== "undefined" && 'vibrate' in navigator) {
                      navigator.vibrate(30);
                    }
                  }}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                  whileHover={{ scale: 1.1, rotate: 90 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                </motion.button>
              </div>

              {/* 通用设置 */}
              {settingsTab === 'general' && (
              <div className="space-y-6">
                {/* 主题设置 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">主题</h4>
                  <div className="flex gap-3">
                    <motion.button 
                      onClick={() => {
                        setTheme('light');
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setToast('已切换到浅色主题');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className={`flex items-center gap-2 px-4 py-2 border rounded-lg transition-colors ${
                        theme === 'light' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-300 hover:bg-gray-50'
                      }`}
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                      animate={{
                        boxShadow: theme === 'light' ? "0 4px 15px rgba(59, 130, 246, 0.3)" : "0 2px 5px rgba(0,0,0,0.1)"
                      }}
                    >
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <circle cx="12" cy="12" r="5" stroke="currentColor" strokeWidth="2"/>
                        <line x1="12" y1="1" x2="12" y2="3" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="12" y1="21" x2="12" y2="23" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="4.22" y1="4.22" x2="5.64" y2="5.64" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="18.36" y1="18.36" x2="19.78" y2="19.78" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="1" y1="12" x2="3" y2="12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="21" y1="12" x2="23" y2="12" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="4.22" y1="19.78" x2="5.64" y2="18.36" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="18.36" y1="5.64" x2="19.78" y2="4.22" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      </svg>
                      浅色
                    </motion.button>
                    <motion.button 
                      onClick={() => {
                        setTheme('dark');
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setToast('已切换到深色主题');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className={`flex items-center gap-2 px-4 py-2 border rounded-lg transition-colors ${
                        theme === 'dark' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-300 hover:bg-gray-50'
                      }`}
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                      animate={{
                        boxShadow: theme === 'dark' ? "0 4px 15px rgba(59, 130, 246, 0.3)" : "0 2px 5px rgba(0,0,0,0.1)"
                      }}
                    >
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                      深色
                    </motion.button>
                    <motion.button 
                      onClick={() => {
                        setTheme('system');
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setToast('已切换到跟随系统主题');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className={`flex items-center gap-2 px-4 py-2 border rounded-lg transition-colors ${
                        theme === 'system' 
                          ? 'border-blue-500 bg-blue-50 text-blue-700' 
                          : 'border-gray-300 hover:bg-gray-50'
                      }`}
                      whileHover={{ scale: 1.05, y: -2 }}
                      whileTap={{ scale: 0.95 }}
                      animate={{
                        boxShadow: theme === 'system' ? "0 4px 15px rgba(59, 130, 246, 0.3)" : "0 2px 5px rgba(0,0,0,0.1)"
                      }}
                    >
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <rect x="2" y="3" width="20" height="14" rx="2" ry="2" stroke="currentColor" strokeWidth="2" fill="none"/>
                        <line x1="8" y1="21" x2="16" y2="21" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                        <line x1="12" y1="17" x2="12" y2="21" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                      </svg>
                      跟随系统
                    </motion.button>
              </div>
                </div>

                {/* 语言设置 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">语言</h4>
              <div className="relative">
                    <select
                      value={siteLang}
                      onChange={(e) => {
                        setSiteLang(e.target.value);
                        if (typeof window !== "undefined") {
                          try {
                            localStorage.setItem("siteLang", e.target.value);
                            if ('vibrate' in navigator) {
                              navigator.vibrate(30);
                            }
                            setToast('语言设置已保存');
                            setTimeout(() => setToast(''), 2000);
                          } catch (error) {
                            console.error("Failed to save language:", error);
                          }
                        }
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="zh">中文</option>
                      <option value="en">English</option>
                    </select>
                  </div>
                </div>

                {/* 聊天设置 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">聊天设置</h4>
                  <div className="space-y-3">
                    <label className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        checked={autoScroll}
                        onChange={(e) => {
                          setAutoScroll(e.target.checked);
                          if (typeof window !== "undefined" && 'vibrate' in navigator) {
                            navigator.vibrate(30);
                          }
                          setToast(e.target.checked ? '已开启自动滚动' : '已关闭自动滚动');
                          setTimeout(() => setToast(''), 2000);
                        }}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">自动滚动到最新消息</span>
                    </label>
                    <label className="flex items-center gap-3">
                      <input
                        type="checkbox"
                        checked={thinkMode}
                        onChange={(e) => {
                          setThinkMode(e.target.checked);
                          if (typeof window !== "undefined" && 'vibrate' in navigator) {
                            navigator.vibrate(30);
                          }
                          setToast(e.target.checked ? '已开启深度思考模式' : '已关闭深度思考模式');
                          setTimeout(() => setToast(''), 2000);
                        }}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">默认开启深度思考模式</span>
                    </label>
                    <label className="flex items-center gap-3">
                      <input 
                        type="checkbox" 
                        checked={webEnabled} 
                        onChange={(e) => {
                          setWebEnabled(e.target.checked);
                          if (typeof window !== "undefined" && 'vibrate' in navigator) {
                            navigator.vibrate(30);
                          }
                          setToast(e.target.checked ? '已开启联网搜索' : '已关闭联网搜索');
                          setTimeout(() => setToast(''), 2000);
                        }}
                        className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                      />
                      <span className="text-sm text-gray-700">默认开启联网搜索</span>
                    </label>
              </div>
                </div>

                {/* 数据统计 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">数据统计</h4>
                  <div className="bg-gray-50 rounded-lg p-3 space-y-2">
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">消息总数:</span>
                      <span className="font-medium">{messageCount}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">最后活动:</span>
                      <span className="font-medium">{lastActivity ? lastActivity.toLocaleTimeString() : "无"}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">当前主题:</span>
                      <span className="font-medium">
                        {theme === 'light' ? '浅色' : theme === 'dark' ? '深色' : '跟随系统'}
                      </span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <span className="text-gray-600">当前语言:</span>
                      <span className="font-medium">{siteLang === 'zh' ? '中文' : 'English'}</span>
                    </div>
                  </div>
                </div>

                {/* 操作按钮 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">操作</h4>
                  <div className="space-y-2">
                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(50);
                        }
                        setPending({ images: [], files: [] });
                        setInput('');
                        setToast('已清空输入内容');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className="w-full px-4 py-2 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition-colors"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                      animate={{
                        boxShadow: "0 2px 10px rgba(245, 158, 11, 0.3)"
                      }}
                    >
                      清空输入内容
                    </motion.button>
                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(50);
                        }
                        newConversation();
                      }}
                      className="w-full px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                      animate={{
                        boxShadow: "0 2px 10px rgba(34, 197, 94, 0.3)"
                      }}
                    >
                      开始新对话
                    </motion.button>
            </div>
          </div>
              </div>
              )}

              {/* 账号管理 */}
              {settingsTab === 'account' && (
              <div className="space-y-6">
                {/* 用户信息 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">用户信息</h4>
                  <div className="bg-gray-50 rounded-lg p-4 space-y-3">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-lg">
                        {session?.user?.name?.charAt(0) || 'U'}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900 dark:text-gray-100">{session?.user?.name || '用户'}</div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">{session?.user?.email || '未设置邮箱'}</div>
                      </div>
                    </div>
                    <div className="text-xs text-gray-500 dark:text-gray-400">
                      注册时间: {(session?.user as any)?.createdAt ? new Date((session?.user as any).createdAt).toLocaleDateString() : '未知'}
                    </div>
                  </div>
                </div>

                {/* 账号设置 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">账号设置</h4>
                  <div className="space-y-3">
                    <motion.button
          onClick={() => { 
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setProfileData({
                          name: session?.user?.name || '',
                          email: session?.user?.email || '',
                          currentPassword: '',
                          newPassword: '',
                          confirmPassword: ''
                        });
                        setShowProfileEdit(true);
                      }}
                      className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                      whileHover={{ scale: 1.02, x: 4 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="flex items-center gap-3">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                          <circle cx="12" cy="7" r="4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span className="text-sm text-gray-700">编辑个人资料</span>
                      </div>
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 18l6-6-6-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                    </motion.button>

                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setProfileData({
                          name: session?.user?.name || '',
                          email: session?.user?.email || '',
                          currentPassword: '',
                          newPassword: '',
                          confirmPassword: ''
                        });
                        setShowPasswordChange(true);
                      }}
                      className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                      whileHover={{ scale: 1.02, x: 4 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="flex items-center gap-3">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <rect x="3" y="11" width="18" height="11" rx="2" ry="2" stroke="currentColor" strokeWidth="2" fill="none"/>
                          <circle cx="12" cy="16" r="1" stroke="currentColor" strokeWidth="2" fill="none"/>
                          <path d="M7 11V7a5 5 0 0110 0v4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span className="text-sm text-gray-700">修改密码</span>
        </div>
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 18l6-6-6-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                    </motion.button>

                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(30);
                        }
                        setToast('跳转到隐私设置页面');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className="w-full flex items-center justify-between p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors"
                      whileHover={{ scale: 1.02, x: 4 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <div className="flex items-center gap-3">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        <span className="text-sm text-gray-700">隐私设置</span>
              </div>
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 18l6-6-6-6" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                    </motion.button>
              </div>
              </div>

                {/* 账号操作 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 mb-3">账号操作</h4>
                  <div className="space-y-2">
                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(50);
                        }
                        setToast('导出数据功能开发中');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className="w-full px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      导出我的数据
                    </motion.button>
                    <motion.button
                      onClick={() => {
                        if (typeof window !== "undefined" && 'vibrate' in navigator) {
                          navigator.vibrate(50);
                        }
                        setToast('删除账号功能开发中');
                        setTimeout(() => setToast(''), 2000);
                      }}
                      className="w-full px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                      whileHover={{ scale: 1.02, y: -2 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      删除账号
                    </motion.button>
                  </div>
                </div>
          </div>
        )}

              {/* 服务协议 */}
              {settingsTab === 'agreement' && (
              <div className="space-y-6">
                {/* 服务条款 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">服务条款</h4>
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 max-h-64 overflow-y-auto">
                    <div className="text-sm text-gray-600 dark:text-gray-400 space-y-3">
                      <div>
                        <p><strong>1. 服务内容</strong></p>
                        <p>本平台提供AI聊天服务，包括但不限于：智能文本对话、图片识别分析、文件内容处理、多语言翻译、代码生成、创意写作等功能。</p>
                      </div>
                      
                      <div>
                        <p><strong>2. 用户责任</strong></p>
                        <p>用户应当遵守相关法律法规，不得发布违法、有害、威胁、诽谤、骚扰、侵权等不当内容。保护账户安全，不得与他人共享账户。</p>
                      </div>
                      
                      <div>
                        <p><strong>3. 服务限制</strong></p>
                        <p>单次对话长度限制10,000字符，每日对话次数限制100次（免费用户），文件上传大小限制10MB，图片数量限制每次最多4张。</p>
                      </div>
                      
                      <div>
                        <p><strong>4. 免责声明</strong></p>
                        <p>AI回答可能不准确或不完整，生成内容可能存在错误或偏见，用户应自行判断和验证AI提供的信息。</p>
                      </div>
                      
                      <div>
                        <p><strong>5. 服务变更</strong></p>
                        <p>我们保留随时修改或终止服务的权利，恕不另行通知。</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 隐私政策 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">隐私政策</h4>
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 max-h-64 overflow-y-auto">
                    <div className="text-sm text-gray-600 dark:text-gray-400 space-y-3">
                      <div>
                        <p><strong>1. 信息收集</strong></p>
                        <p>我们收集注册信息（姓名、邮箱、密码）、使用信息（聊天记录、上传文件、使用偏好）、技术信息（IP地址、浏览器类型、设备信息）和日志信息。</p>
                      </div>
                      
                      <div>
                        <p><strong>2. 信息使用</strong></p>
                        <p>收集的信息用于提供和改进AI服务、个性化用户体验、系统安全和防欺诈、技术支持和客户服务、法律合规和监管要求。</p>
                      </div>
                      
                      <div>
                        <p><strong>3. 信息保护</strong></p>
                        <p>我们采用数据加密传输和存储、访问权限控制和审计、定期安全评估和更新、员工保密协议和培训等措施保护您的信息。</p>
                      </div>
                      
                      <div>
                        <p><strong>4. 信息共享</strong></p>
                        <p>除获得您明确同意、法律要求、保护我们合法权益、与可信合作伙伴（在严格保密协议下）外，我们不会与第三方共享您的信息。</p>
                      </div>
                    </div>
                  </div>
                </div>

                {/* 联系信息 */}
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">联系我们</h4>
                  <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4">
                    <div className="text-sm text-gray-600 dark:text-gray-400 space-y-3">
                      <div>
                        <p><strong>客服支持</strong></p>
                        <p>📧 邮箱：support@jenrych.ai</p>
                        <p>📞 电话：400-123-4567</p>
                        <p>🕒 工作时间：周一至周五 9:00-18:00（北京时间）</p>
                        <p>💬 在线客服：工作日 9:00-21:00</p>
                      </div>
                      
                      <div>
                        <p><strong>技术反馈</strong></p>
                        <p>🐛 Bug报告：bug@jenrych.ai</p>
                        <p>💡 功能建议：feedback@jenrych.ai</p>
                        <p>🔒 安全漏洞：security@jenrych.ai</p>
                      </div>
                      
                      <div>
                        <p><strong>商务合作</strong></p>
                        <p>🤝 合作洽谈：business@jenrych.ai</p>
                        <p>📈 企业服务：enterprise@jenrych.ai</p>
                        <p>📰 媒体联系：media@jenrych.ai</p>
                      </div>
                      
                      <div className="text-xs text-gray-500 dark:text-gray-500">
                        更新时间: 2024年9月30日
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              )}
              </div>
            </motion.div>
        </div>
      )}

      {/* 编辑个人资料模态框 */}
      {showProfileEdit && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
            <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md mx-4 p-6 transition-colors duration-300"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">编辑个人资料</h3>
              <button
                onClick={() => setShowProfileEdit(false)}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
                </button>
              </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">姓名</label>
                <input
                  type="text"
                  value={profileData.name}
                  onChange={(e) => setProfileData(prev => ({ ...prev, name: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  placeholder="请输入姓名"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">邮箱</label>
                <input
                  type="email"
                  value={profileData.email}
                  onChange={(e) => setProfileData(prev => ({ ...prev, email: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  placeholder="请输入邮箱"
                />
              </div>
              
              <div className="flex gap-3 pt-4">
                <motion.button
                  onClick={() => setShowProfileEdit(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  取消
                </motion.button>
                <motion.button
                  onClick={() => {
                    // 这里可以添加保存个人资料的API调用
                    setToast('个人资料已保存');
                    setTimeout(() => setToast(''), 2000);
                    setShowProfileEdit(false);
                  }}
                  className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  保存
                </motion.button>
              </div>
              </div>
            </motion.div>
          </div>
        )}

      {/* 修改密码模态框 */}
      {showPasswordChange && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className="bg-white dark:bg-gray-800 rounded-xl shadow-2xl w-full max-w-md mx-4 p-6 transition-colors duration-300"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">修改密码</h3>
              <button
                onClick={() => setShowPasswordChange(false)}
                className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
              >
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                </svg>
              </button>
        </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">当前密码</label>
                <input
                  type="password"
                  value={profileData.currentPassword}
                  onChange={(e) => setProfileData(prev => ({ ...prev, currentPassword: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  placeholder="请输入当前密码"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">新密码</label>
                <input
                  type="password"
                  value={profileData.newPassword}
                  onChange={(e) => setProfileData(prev => ({ ...prev, newPassword: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  placeholder="请输入新密码"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">确认新密码</label>
                <input
                  type="password"
                  value={profileData.confirmPassword}
                  onChange={(e) => setProfileData(prev => ({ ...prev, confirmPassword: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                  placeholder="请再次输入新密码"
                />
              </div>
              
              <div className="flex gap-3 pt-4">
                <motion.button
                  onClick={() => setShowPasswordChange(false)}
                  className="flex-1 px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  取消
                </motion.button>
                <motion.button
                  onClick={() => {
                    if (profileData.newPassword !== profileData.confirmPassword) {
                      setToast('两次输入的密码不一致');
                      setTimeout(() => setToast(''), 2000);
                      return;
                    }
                    // 这里可以添加修改密码的API调用
                    setToast('密码修改成功');
                    setTimeout(() => setToast(''), 2000);
                    setShowPasswordChange(false);
                  }}
                  className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                >
                  保存
                </motion.button>
              </div>
            </div>
          </motion.div>
        </div>
      )}

      {/* Toast 提示 */}
      {toast && (
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 50 }}
          className="fixed bottom-20 right-4 bg-gray-800 text-white px-4 py-2 rounded-lg z-50 shadow-lg"
        >
          {toast}
        </motion.div>
      )}
    </div>
  );
}
